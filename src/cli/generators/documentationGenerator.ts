import type { AnalysisResult } from '../cliWebsiteAnalyzer.js';

export function generateReadme(url: string, analysis: AnalysisResult): string {
  const domain = new URL(url).hostname;
  const siteTitle = analysis.metadata.title || domain;
  
  return `# AI Optimization Files for ${domain}

This package contains comprehensive AI optimization files generated by GEOforge CLI.

## Analysis Results

- **Site Title**: ${siteTitle}
- **Description**: ${analysis.metadata.description || 'No description available'}
- **Language**: ${analysis.metadata.language || 'English'}
- **Response Time**: ${analysis.technical.responseTime}ms
- **Content Length**: ${analysis.technical.contentLength} bytes
- **SSL Enabled**: ${analysis.technical.sslEnabled ? 'Yes' : 'No'}
- **Existing robots.txt**: ${analysis.technical.hasRobots ? 'Found' : 'Not found'}
- **Existing sitemap.xml**: ${analysis.technical.hasSitemap ? 'Found' : 'Not found'}

## Files Included

### Core Files
- \`robots.txt\` - AI crawler directives and policies
- \`sitemap.xml\` - Enhanced XML sitemap with AI metadata
- \`humans.txt\` - Human-readable site information

### AI-Specific Files
- \`.well-known/ai.txt\` - AI interaction guidelines
- \`.well-known/security.txt\` - Security contact information

### Web App Files
- \`manifest.json\` - Progressive Web App manifest
- \`browserconfig.xml\` - Microsoft tile configuration

### Advertising Files
- \`ads.txt\` - Authorized digital sellers
- \`app-ads.txt\` - Mobile app advertising

### Error Pages
- \`404.html\` - Custom 404 error page
- \`500.html\` - Custom 500 error page

## Installation

1. Extract all files to your website's root directory
2. Ensure \`.well-known/\` directory is accessible
3. Update any domain-specific references in the files

## AI Platforms Supported

- OpenAI (GPTBot, ChatGPT-User, OAI-SearchBot)
- Anthropic (ClaudeBot, Claude-SearchBot, Claude-User)
- Perplexity (PerplexityBot, Perplexity-User)
- Microsoft (BingBot)
- Google (Google-Extended)
- Apple (Applebot-Extended)

## Generated by

GEOforge CLI v0.0.1
Generated on: ${new Date().toISOString()}
Website: ${url}
Analysis Date: ${analysis.timestamp}`;
}

export function generateDeploymentGuide(url: string, analysis: AnalysisResult): string {
  const domain = new URL(url).hostname;
  const siteTitle = analysis.metadata.title || domain;
  
  return `# Deployment Guide for ${domain}

## Quick Start

1. **Extract Files**: Extract all files to your website's root directory
2. **Upload**: Upload all files to your web server
3. **Verify**: Check that files are accessible at your domain

## File Locations

### Root Directory
- \`robots.txt\` → \`https://${domain}/robots.txt\`
- \`sitemap.xml\` → \`https://${domain}/sitemap.xml\`
- \`humans.txt\` → \`https://${domain}/humans.txt\`
- \`manifest.json\` → \`https://${domain}/manifest.json\`
- \`ads.txt\` → \`https://${domain}/ads.txt\`
- \`app-ads.txt\` → \`https://${domain}/app-ads.txt\`
- \`browserconfig.xml\` → \`https://${domain}/browserconfig.xml\`


### .well-known Directory
- \`.well-known/ai.txt\` → \`https://${domain}/.well-known/ai.txt\`
- \`.well-known/security.txt\` → \`https://${domain}/.well-known/security.txt\`

## Server Configuration

### Apache (.htaccess)
\`\`\`apache
# Enable .well-known directory
RewriteEngine On
RewriteRule ^\\.well-known/(.*)$ .well-known/$1 [L]

# Enable .well-known directory access
\`\`\`

### Nginx
\`\`\`nginx
# Enable .well-known directory access

# .well-known location
location /.well-known/ {
    try_files $uri =404;
}
\`\`\`

## Verification

After deployment, verify these URLs are accessible:
- \`https://${domain}/robots.txt\`
- \`https://${domain}/sitemap.xml\`
- \`https://${domain}/.well-known/ai.txt\`
- \`https://${domain}/.well-known/security.txt\`

## Testing

Use these tools to verify your deployment:
- Google Search Console
- Bing Webmaster Tools
- Screaming Frog SEO Spider
- Online robots.txt validators

## Support

For deployment issues, check:
1. File permissions (644 for files, 755 for directories)
2. Server configuration for .well-known directory
3. HTTPS redirects and canonical URLs

Generated by GEOforge CLI v0.0.1`;
}

export function generateAnalysisReport(url: string, analysis: AnalysisResult): string {
  const domain = new URL(url).hostname;
  const siteTitle = analysis.metadata.title || domain;
  
  const report = {
    geoforge: {
      version: "0.0.1",
      generated: new Date().toISOString(),
      url: url,
      domain: domain
    },
    site: {
      title: siteTitle,
      description: analysis.metadata.description || 'No description available',
      language: analysis.metadata.language || 'Not specified',
      charset: analysis.metadata.charset || 'Not specified',
      author: analysis.metadata.author || 'Not specified'
    },
    technical: {
      responseTime: analysis.technical.responseTime,
      statusCode: analysis.technical.statusCode,
      contentType: analysis.technical.contentType,
      contentLength: analysis.technical.contentLength,
      sslEnabled: analysis.technical.sslEnabled,
      hasRobots: analysis.technical.hasRobots,
      hasSitemap: analysis.technical.hasSitemap
    },
    seo: {
      metaTags: analysis.seo.metaTags,
      headings: analysis.seo.headings.slice(0, 20),
      links: analysis.seo.links.slice(0, 50).map(link => ({
        href: link.href,
        text: link.text,
        rel: link.rel
      })),
      images: analysis.seo.images.slice(0, 20).map(img => ({
        src: img.src,
        alt: img.alt,
        title: img.title
      }))
    },
    performance: {
      loadTime: analysis.performance.loadTime,
      domContentLoaded: analysis.performance.domContentLoaded,
      firstContentfulPaint: analysis.performance.firstContentfulPaint,
      largestContentfulPaint: analysis.performance.largestContentfulPaint,
      cumulativeLayoutShift: analysis.performance.cumulativeLayoutShift,
      firstInputDelay: analysis.performance.firstInputDelay
    },
    assets: {
      stylesheets: analysis.assets.stylesheets.slice(0, 20),
      scripts: analysis.assets.scripts.slice(0, 20),
      images: analysis.assets.images.slice(0, 20),
      fonts: analysis.assets.fonts.slice(0, 10)
    },
    generatedFiles: {
      core: [
        "robots.txt - AI crawler directives and policies",
        "sitemap.xml - Enhanced XML sitemap with AI metadata",
        "humans.txt - Human-readable site information"
      ],
      ai: [
        ".well-known/ai.txt - AI interaction guidelines",
        ".well-known/security.txt - Security contact information"
      ],
      web: [
        "manifest.json - Progressive Web App manifest",
        "browserconfig.xml - Microsoft tile configuration"
      ],
      advertising: [
        "ads.txt - Authorized digital sellers",
        "app-ads.txt - Mobile app advertising"
      ]
    },
    summary: {
      totalLinks: analysis.seo.links.length,
      totalImages: analysis.seo.images.length,
      totalStylesheets: analysis.assets.stylesheets.length,
      totalScripts: analysis.assets.scripts.length,
      analysisStatus: analysis.status,
      timestamp: analysis.timestamp
    }
  };
  
  return JSON.stringify(report, null, 2);
} 