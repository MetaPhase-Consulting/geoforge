import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import type { AnalysisConfig, AnalysisResult } from './websiteAnalyzer';

interface GeneratedFile {
  name: string;
  content: string;
  type: 'text' | 'json' | 'xml';
}

export class ZipGenerator {
  private config: AnalysisConfig;
  private analysisResult: AnalysisResult;

  constructor(config: AnalysisConfig, analysisResult: AnalysisResult) {
    this.config = config;
    this.analysisResult = analysisResult;
  }

  async generateAndDownload(onProgress?: (progress: number, status: string) => void): Promise<void> {
    const zip = new JSZip();

    try {
      onProgress?.(10, 'Generating robots.txt...');
      const robotsTxt = this.generateRobotsTxt();
      zip.file('robots.txt', robotsTxt.content);

      onProgress?.(20, 'Generating sitemap.xml...');
      if (this.config.includeSitemap) {
        const sitemap = this.generateSitemap();
        zip.file('sitemap.xml', sitemap.content);
      }

      onProgress?.(30, 'Generating humans.txt...');
      if (this.config.includeHumans) {
        const humansTxt = this.generateHumansTxt();
        zip.file('humans.txt', humansTxt.content);
      }

      onProgress?.(40, 'Generating LLM manifests...');
      const manifests = this.generateLLMManifests();
      manifests.forEach(manifest => {
        zip.file(manifest.name, manifest.content);
      });

      onProgress?.(50, 'Generating analysis report...');
      const analysisReport = this.generateAnalysisReport();
      zip.file('analysis-report.html', analysisReport.content);
      zip.file('analysis-data.json', JSON.stringify(this.analysisResult, null, 2));

      onProgress?.(60, 'Generating configuration files...');
      const configFiles = this.generateConfigFiles();
      configFiles.forEach(file => {
        zip.file(file.name, file.content);
      });

      onProgress?.(70, 'Adding documentation...');
      const documentation = this.generateDocumentation();
      zip.file('README.md', documentation.content);

      onProgress?.(80, 'Creating deployment guide...');
      const deploymentGuide = this.generateDeploymentGuide();
      zip.file('DEPLOYMENT.md', deploymentGuide.content);

      onProgress?.(90, 'Compressing files...');
      const compressionLevel = this.getCompressionLevel();
      const blob = await zip.generateAsync({
        type: 'blob',
        compression: 'DEFLATE',
        compressionOptions: { level: compressionLevel }
      });

      onProgress?.(100, 'Download starting...');
      const filename = `${this.config.siteName || 'geoforge'}-geo-files-${new Date().toISOString().split('T')[0]}.zip`;
      saveAs(blob, filename);

    } catch (error) {
      throw new Error(`Failed to generate ZIP file: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  private generateRobotsTxt(): GeneratedFile {
    const lines: string[] = [];
    
    lines.push('# Robots.txt generated by GEOforge');
    lines.push(`# Generated on: ${new Date().toISOString()}`);
    lines.push(`# For: ${this.config.url}`);
    lines.push('');

    // Human crawlers
    lines.push('# Search Engine Crawlers');
    lines.push('User-agent: Googlebot');
    lines.push('Allow: /');
    lines.push('');
    lines.push('User-agent: Bingbot');
    lines.push('Allow: /');
    lines.push('');

    // AI crawlers
    lines.push('# AI Training Crawlers');
    this.config.llms.forEach(llm => {
      const userAgent = this.getLLMUserAgent(llm.id);
      if (userAgent) {
        lines.push(`User-agent: ${userAgent}`);
        lines.push(llm.enabled ? 'Allow: /' : 'Disallow: /');
        lines.push('');
      }
    });

    // General AI training policy
    if (!this.config.allowTraining) {
      lines.push('# Block AI training crawlers');
      lines.push('User-agent: GPTBot');
      lines.push('Disallow: /');
      lines.push('');
      lines.push('User-agent: Google-Extended');
      lines.push('Disallow: /');
      lines.push('');
      lines.push('User-agent: CCBot');
      lines.push('Disallow: /');
      lines.push('');
    }

    // Sitemap reference
    if (this.config.includeSitemap) {
      lines.push(`Sitemap: ${new URL('/sitemap.xml', this.config.url).href}`);
    }

    return {
      name: 'robots.txt',
      content: lines.join('\n'),
      type: 'text'
    };
  }

  private generateSitemap(): GeneratedFile {
    const urls = [this.config.url, ...this.analysisResult.crawledPages];
    const uniqueUrls = [...new Set(urls)];

    const lines: string[] = [];
    lines.push('<?xml version="1.0" encoding="UTF-8"?>');
    lines.push('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">');

    uniqueUrls.forEach(url => {
      lines.push('  <url>');
      lines.push(`    <loc>${url}</loc>`);
      lines.push(`    <lastmod>${new Date().toISOString().split('T')[0]}</lastmod>`);
      lines.push('    <changefreq>weekly</changefreq>');
      lines.push('    <priority>0.8</priority>');
      lines.push('  </url>');
    });

    lines.push('</urlset>');

    return {
      name: 'sitemap.xml',
      content: lines.join('\n'),
      type: 'xml'
    };
  }

  private generateHumansTxt(): GeneratedFile {
    const lines: string[] = [];
    
    lines.push('/* TEAM */');
    lines.push(`Website: ${this.config.url}`);
    lines.push(`Generated: ${new Date().toLocaleDateString()}`);
    lines.push('');
    lines.push('/* THANKS */');
    lines.push('GEOforge - AI Optimization Tool');
    lines.push('https://geoforge.dev');
    lines.push('');
    lines.push('/* SITE */');
    lines.push('Standards: HTML5, CSS3, JavaScript');
    lines.push('Components: AI-ready optimization');
    lines.push('Software: GEOforge');

    return {
      name: 'humans.txt',
      content: lines.join('\n'),
      type: 'text'
    };
  }

  private generateLLMManifests(): GeneratedFile[] {
    const manifests: GeneratedFile[] = [];

    this.config.llms.forEach(llm => {
      if (llm.enabled) {
        const manifest = {
          name: `${llm.id}.json`,
          content: JSON.stringify({
            version: '1.0',
            generator: 'GEOforge',
            generated: new Date().toISOString(),
            website: {
              url: this.config.url,
              name: this.config.siteName,
              description: this.analysisResult.metadata.description
            },
            permissions: {
              crawling: true,
              training: this.config.allowTraining,
              indexing: true
            },
            policies: {
              attribution: 'required',
              commercial_use: 'allowed',
              modification: 'allowed'
            },
            technical: {
              preferred_format: 'json',
              rate_limit: '1req/sec',
              user_agent: this.getLLMUserAgent(llm.id)
            },
            content: {
              languages: [this.analysisResult.metadata.language || 'en'],
              topics: this.analysisResult.metadata.keywords,
              last_updated: new Date().toISOString()
            }
          }, null, 2),
          type: 'json' as const
        };
        manifests.push(manifest);
      }
    });

    return manifests;
  }

  private generateAnalysisReport(): GeneratedFile {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website Analysis Report - ${this.config.siteName}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #D4AF37; border-bottom: 3px solid #D4AF37; padding-bottom: 10px; }
        h2 { color: #333; margin-top: 30px; }
        .metric { display: inline-block; margin: 10px; padding: 15px; background: #f8f9fa; border-radius: 6px; border-left: 4px solid #D4AF37; }
        .metric-label { font-weight: bold; display: block; }
        .metric-value { font-size: 1.2em; color: #D4AF37; }
        .success { color: #28a745; }
        .warning { color: #ffc107; }
        .error { color: #dc3545; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .card { background: #f8f9fa; padding: 20px; border-radius: 6px; border: 1px solid #dee2e6; }
        ul { list-style-type: none; padding: 0; }
        li { padding: 5px 0; border-bottom: 1px solid #eee; }
        .timestamp { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Website Analysis Report</h1>
        <p class="timestamp">Generated on ${new Date().toLocaleString()} by GEOforge</p>
        
        <div class="grid">
            <div class="metric">
                <span class="metric-label">Website</span>
                <span class="metric-value">${this.config.url}</span>
            </div>
            <div class="metric">
                <span class="metric-label">Status Code</span>
                <span class="metric-value ${this.analysisResult.technical.statusCode === 200 ? 'success' : 'error'}">${this.analysisResult.technical.statusCode}</span>
            </div>
            <div class="metric">
                <span class="metric-label">Response Time</span>
                <span class="metric-value">${this.analysisResult.technical.responseTime}ms</span>
            </div>
            <div class="metric">
                <span class="metric-label">SSL Enabled</span>
                <span class="metric-value ${this.analysisResult.technical.sslEnabled ? 'success' : 'error'}">${this.analysisResult.technical.sslEnabled ? 'Yes' : 'No'}</span>
            </div>
        </div>

        <h2>SEO Analysis</h2>
        <div class="grid">
            <div class="card">
                <h3>Page Title</h3>
                <p>${this.analysisResult.metadata.title || 'No title found'}</p>
            </div>
            <div class="card">
                <h3>Meta Description</h3>
                <p>${this.analysisResult.metadata.description || 'No description found'}</p>
            </div>
            <div class="card">
                <h3>Headings Structure</h3>
                <ul>
                    ${this.analysisResult.seo.headings.slice(0, 10).map(h => `<li>H${h.level}: ${h.text}</li>`).join('')}
                </ul>
            </div>
            <div class="card">
                <h3>Images</h3>
                <p>Total: ${this.analysisResult.seo.images.length}</p>
                <p>Missing Alt Text: ${this.analysisResult.seo.images.filter(img => !img.alt).length}</p>
            </div>
        </div>

        <h2>Performance Metrics</h2>
        <div class="grid">
            <div class="metric">
                <span class="metric-label">Load Time</span>
                <span class="metric-value">${Math.round(this.analysisResult.performance.loadTime)}ms</span>
            </div>
            <div class="metric">
                <span class="metric-label">First Contentful Paint</span>
                <span class="metric-value">${Math.round(this.analysisResult.performance.firstContentfulPaint)}ms</span>
            </div>
            <div class="metric">
                <span class="metric-label">Largest Contentful Paint</span>
                <span class="metric-value">${Math.round(this.analysisResult.performance.largestContentfulPaint)}ms</span>
            </div>
            <div class="metric">
                <span class="metric-label">Cumulative Layout Shift</span>
                <span class="metric-value">${this.analysisResult.performance.cumulativeLayoutShift.toFixed(3)}</span>
            </div>
        </div>

        <h2>Accessibility Score</h2>
        <div class="metric">
            <span class="metric-label">Overall Score</span>
            <span class="metric-value ${this.analysisResult.accessibility.score >= 80 ? 'success' : this.analysisResult.accessibility.score >= 60 ? 'warning' : 'error'}">${this.analysisResult.accessibility.score}/100</span>
        </div>

        ${this.analysisResult.accessibility.issues.length > 0 ? `
        <h3>Accessibility Issues</h3>
        <ul>
            ${this.analysisResult.accessibility.issues.map(issue => `<li class="${issue.severity}">${issue.message}</li>`).join('')}
        </ul>
        ` : ''}

        <h2>Technical Details</h2>
        <div class="grid">
            <div class="card">
                <h3>Robots.txt</h3>
                <p class="${this.analysisResult.technical.hasRobots ? 'success' : 'warning'}">${this.analysisResult.technical.hasRobots ? 'Found' : 'Not found'}</p>
            </div>
            <div class="card">
                <h3>Sitemap</h3>
                <p class="${this.analysisResult.technical.hasSitemap ? 'success' : 'warning'}">${this.analysisResult.technical.hasSitemap ? 'Found' : 'Not found'}</p>
            </div>
            <div class="card">
                <h3>Content Type</h3>
                <p>${this.analysisResult.technical.contentType}</p>
            </div>
            <div class="card">
                <h3>Content Length</h3>
                <p>${this.formatBytes(this.analysisResult.technical.contentLength)}</p>
            </div>
        </div>

        <h2>Discovered Assets</h2>
        <div class="grid">
            <div class="card">
                <h3>Stylesheets (${this.analysisResult.assets.stylesheets.length})</h3>
                <ul>
                    ${this.analysisResult.assets.stylesheets.slice(0, 5).map(css => `<li>${css}</li>`).join('')}
                    ${this.analysisResult.assets.stylesheets.length > 5 ? `<li>... and ${this.analysisResult.assets.stylesheets.length - 5} more</li>` : ''}
                </ul>
            </div>
            <div class="card">
                <h3>Scripts (${this.analysisResult.assets.scripts.length})</h3>
                <ul>
                    ${this.analysisResult.assets.scripts.slice(0, 5).map(js => `<li>${js}</li>`).join('')}
                    ${this.analysisResult.assets.scripts.length > 5 ? `<li>... and ${this.analysisResult.assets.scripts.length - 5} more</li>` : ''}
                </ul>
            </div>
            <div class="card">
                <h3>Images (${this.analysisResult.assets.images.length})</h3>
                <ul>
                    ${this.analysisResult.assets.images.slice(0, 5).map(img => `<li>${img}</li>`).join('')}
                    ${this.analysisResult.assets.images.length > 5 ? `<li>... and ${this.analysisResult.assets.images.length - 5} more</li>` : ''}
                </ul>
            </div>
        </div>

        ${this.analysisResult.errors.length > 0 ? `
        <h2>Errors & Warnings</h2>
        <ul>
            ${this.analysisResult.errors.map(error => `<li class="error">${error}</li>`).join('')}
        </ul>
        ` : ''}

        <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #dee2e6; text-align: center; color: #666;">
            <p>Generated by <strong>GEOforge</strong> - AI Website Optimization Tool</p>
            <p>Visit <a href="https://geoforge.dev" style="color: #D4AF37;">geoforge.dev</a> for more information</p>
        </footer>
    </div>
</body>
</html>`;

    return {
      name: 'analysis-report.html',
      content: html,
      type: 'text'
    };
  }

  private generateConfigFiles(): GeneratedFile[] {
    const files: GeneratedFile[] = [];

    // .well-known/ai.txt
    const aiTxt = [
      '# AI.txt - AI Interaction Guidelines',
      `# Generated by GEOforge for ${this.config.url}`,
      '',
      '# Training Permission',
      `training: ${this.config.allowTraining ? 'allowed' : 'disallowed'}`,
      '',
      '# Crawling Rules',
      'crawling: allowed',
      'rate-limit: 1req/sec',
      '',
      '# Attribution',
      'attribution: required',
      `source: ${this.config.url}`,
      '',
      '# Contact',
      `website: ${this.config.url}`,
      `updated: ${new Date().toISOString().split('T')[0]}`
    ].join('\n');

    files.push({
      name: '.well-known/ai.txt',
      content: aiTxt,
      type: 'text'
    });

    // llms.txt
    const llmsTxt = [
      '# LLMs.txt - Large Language Model Directives',
      `# For: ${this.config.url}`,
      `# Generated: ${new Date().toISOString()}`,
      '',
      '# Enabled AI Systems:',
      ...this.config.llms.filter(llm => llm.enabled).map(llm => `# - ${llm.name}: ${llm.description}`),
      '',
      '# Training Policy:',
      `# Content may ${this.config.allowTraining ? '' : 'NOT '}be used for AI training`,
      '',
      '# Usage Guidelines:',
      '# - Respect robots.txt directives',
      '# - Provide attribution when using content',
      '# - Follow rate limiting guidelines',
      '# - Check vendor-specific manifest files'
    ].join('\n');

    files.push({
      name: 'llms.txt',
      content: llmsTxt,
      type: 'text'
    });

    return files;
  }

  private generateDocumentation(): GeneratedFile {
    const content = `# GEOforge Generated Files

This package contains AI-ready optimization files generated by GEOforge for **${this.config.siteName}** (${this.config.url}).

## Generated Files

### Core Files
- \`robots.txt\` - Search engine and AI crawler directives
- \`sitemap.xml\` - XML sitemap for search engines
- \`humans.txt\` - Human-readable site information
- \`llms.txt\` - Large Language Model directives

### AI Vendor Manifests
${this.config.llms.filter(llm => llm.enabled).map(llm => `- \`${llm.id}.json\` - ${llm.name} specific configuration`).join('\n')}

### Analysis & Reports
- \`analysis-report.html\` - Comprehensive website analysis report
- \`analysis-data.json\` - Raw analysis data in JSON format

### Configuration Files
- \`.well-known/ai.txt\` - AI interaction guidelines
- \`DEPLOYMENT.md\` - Deployment instructions

## Installation

1. Extract all files from this ZIP package
2. Copy the files to your website's root directory
3. Ensure proper file permissions (644 for most files)
4. Test the files are accessible via your web server

## Verification

After deployment, verify the files are accessible:
- ${this.config.url}/robots.txt
- ${this.config.url}/sitemap.xml
- ${this.config.url}/humans.txt
- ${this.config.url}/.well-known/ai.txt

## Configuration Summary

- **Training Allowed**: ${this.config.allowTraining ? 'Yes' : 'No'}
- **Sitemap Included**: ${this.config.includeSitemap ? 'Yes' : 'No'}
- **Humans.txt Included**: ${this.config.includeHumans ? 'Yes' : 'No'}

## Enabled AI Systems

${this.config.llms.filter(llm => llm.enabled).map(llm => `- **${llm.name}**: ${llm.description}`).join('\n')}

## Support

For questions or issues with these files:
- Visit: https://geoforge.dev
- Documentation: https://docs.geoforge.dev
- GitHub: https://github.com/brianfunk/geoforge

Generated on ${new Date().toLocaleString()} by GEOforge v1.0
`;

    return {
      name: 'README.md',
      content,
      type: 'text'
    };
  }

  private generateDeploymentGuide(): GeneratedFile {
    const content = `# Deployment Guide

## Quick Start

1. **Extract Files**: Unzip this package to a temporary directory
2. **Upload Files**: Copy all files to your website's root directory
3. **Set Permissions**: Ensure files have proper read permissions (644)
4. **Test Access**: Verify files are accessible via web browser

## File Locations

\`\`\`
your-website-root/
├── robots.txt
├── sitemap.xml
├── humans.txt
├── llms.txt
├── .well-known/
│   └── ai.txt
${this.config.llms.filter(llm => llm.enabled).map(llm => `├── ${llm.id}.json`).join('\n')}
\`\`\`

## Server Configuration

### Apache (.htaccess)
\`\`\`apache
# Ensure proper MIME types
<Files "*.txt">
    ForceType text/plain
</Files>

<Files "*.json">
    ForceType application/json
</Files>

<Files "*.xml">
    ForceType application/xml
</Files>
\`\`\`

### Nginx
\`\`\`nginx
location ~* \\.(txt|json|xml)$ {
    add_header Content-Type text/plain;
    add_header Cache-Control "public, max-age=3600";
}
\`\`\`

## Verification Checklist

After deployment, check these URLs return HTTP 200:

- [ ] ${this.config.url}/robots.txt
- [ ] ${this.config.url}/sitemap.xml
- [ ] ${this.config.url}/humans.txt
- [ ] ${this.config.url}/llms.txt
- [ ] ${this.config.url}/.well-known/ai.txt
${this.config.llms.filter(llm => llm.enabled).map(llm => `- [ ] ${this.config.url}/${llm.id}.json`).join('\n')}

## Testing AI Crawler Access

Use these commands to test crawler access:

\`\`\`bash
# Test robots.txt
curl -A "GPTBot" ${this.config.url}/robots.txt

# Test AI manifest
curl -H "Accept: application/json" ${this.config.url}/openai.json

# Validate sitemap
curl ${this.config.url}/sitemap.xml
\`\`\`

## Maintenance

- **Update Frequency**: Review and regenerate files monthly
- **Content Changes**: Regenerate when site structure changes significantly
- **AI Policy Updates**: Update manifests when AI usage policies change

## Troubleshooting

### Common Issues

1. **404 Errors**: Ensure files are in the correct directory
2. **Permission Denied**: Check file permissions (should be 644)
3. **Wrong MIME Type**: Configure server to serve correct content types
4. **Caching Issues**: Clear CDN/proxy caches after deployment

### Support

If you encounter issues:
1. Check the analysis report for specific recommendations
2. Visit https://docs.geoforge.dev for detailed documentation
3. Open an issue at https://github.com/brianfunk/geoforge

---

Generated by GEOforge on ${new Date().toLocaleString()}
`;

    return {
      name: 'DEPLOYMENT.md',
      content,
      type: 'text'
    };
  }

  private getCompressionLevel(): number {
    switch (this.config.compression) {
      case 'none': return 0;
      case 'standard': return 6;
      case 'maximum': return 9;
      default: return 6;
    }
  }

  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}