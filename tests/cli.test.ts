import { describe, it, expect, vi, beforeEach } from 'vitest';
import { execSync } from 'child_process';
import fs from 'fs/promises';
import path from 'path';

// Mock the CLI modules
vi.mock('../src/cli/cliWebsiteAnalyzer.js', () => ({
  WebsiteAnalyzer: vi.fn().mockImplementation(() => ({
    analyze: vi.fn().mockResolvedValue({
      metadata: {
        title: 'Test Website',
        description: 'A test website for CLI testing',
        url: 'https://metaphase.tech'
      },
      pages: [
        {
          url: 'https://metaphase.tech',
          title: 'Test Website',
          content: '<html><head><title>Test Website</title></head><body>Test content</body></html>'
        }
      ],
      assets: {
        css: [],
        js: [],
        images: []
      }
    })
  }))
}));

vi.mock('../src/cli/cliZipGenerator.js', () => ({
  ZipGenerator: vi.fn().mockImplementation(() => ({
    generateAndDownload: vi.fn().mockResolvedValue(undefined),
    saveAs: vi.fn().mockResolvedValue(undefined)
  }))
}));

describe('CLI Tests', () => {
  const testOutputDir = path.resolve(process.cwd(), 'test-output');

  beforeEach(async () => {
    // Ensure test output directory exists
    try {
      await fs.mkdir(testOutputDir, { recursive: true });
    } catch (error) {
      // Directory might already exist
    }
  });

  describe('URL Formatting', () => {
    it('should format URLs correctly', () => {
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      expect(formatUrl('https://metaphase.tech')).toBe('https://metaphase.tech');
      expect(formatUrl('http://farmers.gov')).toBe('http://farmers.gov');
      expect(formatUrl('metaphase.tech')).toBe('https://metaphase.tech');
      expect(formatUrl('  farmers.gov  ')).toBe('https://farmers.gov');
      expect(formatUrl('')).toBe('');
      expect(formatUrl('   ')).toBe('');
    });
  });

  describe('Configuration Setup', () => {
    it('should create correct configuration object', () => {
      // Mock agents for testing
      const mockAgents = [
        { id: 'gptbot', defaultEnabled: true },
        { id: 'claudebot', defaultEnabled: false },
        { id: 'perplexitybot', defaultEnabled: true }
      ];
      
      const agentChoices: Record<string, boolean> = {};
      mockAgents.forEach((agent: any) => {
        agentChoices[agent.id] = agent.defaultEnabled;
      });

      expect(agentChoices).toBeDefined();
      expect(typeof agentChoices).toBe('object');
      
      // Check that all agents are included
      mockAgents.forEach((agent: any) => {
        expect(agentChoices).toHaveProperty(agent.id);
        expect(typeof agentChoices[agent.id]).toBe('boolean');
      });
    });

    it('should have correct default configuration', () => {
      const config = {
        url: 'https://metaphase.tech',
        siteName: '',
        allowTraining: false,
        agents: {},
        includeHumans: true,
        includeSitemap: true,
        includeAssets: {
          html: true,
          css: false,
          js: false,
          images: false,
          fonts: false,
        },
        compression: 'standard'
      };

      expect(config.url).toBe('https://metaphase.tech');
      expect(config.allowTraining).toBe(false);
      expect(config.includeHumans).toBe(true);
      expect(config.includeSitemap).toBe(true);
      expect(config.compression).toBe('standard');
    });
  });

  describe('File Generation', () => {
    it('should generate robots.txt content', async () => {
      const robotsContent = `# AI Crawler Directives
# Generated by GEOforge CLI

User-agent: GPTBot
Disallow: /

User-agent: ChatGPT-User
Disallow: /

User-agent: OAI-SearchBot
Disallow: /

User-agent: ClaudeBot
Disallow: /

User-agent: anthropic-ai
Disallow: /

User-agent: Claude-SearchBot
Disallow: /

User-agent: Claude-User
Disallow: /

User-agent: PerplexityBot
Disallow: /

User-agent: Perplexity-User
Disallow: /

User-agent: Bingbot
Disallow: /

# Policy Tokens
User-agent: Google-Extended
Disallow: /

User-agent: Applebot-Extended
Disallow: /

# Standard crawlers
User-agent: *
Allow: /

# Sitemap
Sitemap: https://metaphase.tech/sitemap.xml`;

      expect(robotsContent).toContain('AI Crawler Directives');
      expect(robotsContent).toContain('GPTBot');
      expect(robotsContent).toContain('ClaudeBot');
      expect(robotsContent).toContain('PerplexityBot');
      expect(robotsContent).toContain('Disallow: /');
      expect(robotsContent).toContain('Sitemap: https://metaphase.tech/sitemap.xml');
    });

    it('should generate sitemap.xml content', async () => {
      const sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://farmers.gov</loc>
    <lastmod>2024-01-01</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>
</urlset>`;

      expect(sitemapContent).toContain('<?xml version="1.0"');
      expect(sitemapContent).toContain('<urlset');
      expect(sitemapContent).toContain('<loc>https://farmers.gov</loc>');
      expect(sitemapContent).toContain('<lastmod>2024-01-01</lastmod>');
      expect(sitemapContent).toContain('<changefreq>weekly</changefreq>');
      expect(sitemapContent).toContain('<priority>1.0</priority>');
    });

    it('should generate humans.txt content', async () => {
      const humansContent = `/* TEAM */
Developer: Brian Funk
Contact: https://github.com/MetaPhase-Consulting

/* SITE */
Last update: 2024
Language: English
Doctype: HTML5
IDE: VS Code
Standards: HTML5, CSS3, JavaScript ES6+
Components: React, TypeScript, Tailwind CSS
Software: GEOforge CLI`;

      expect(humansContent).toContain('TEAM');
      expect(humansContent).toContain('SITE');
      expect(humansContent).toContain('Brian Funk');
      expect(humansContent).toContain('GEOforge CLI');
    });
  });

  describe('CLI Integration', () => {
    it('should handle valid URL input', () => {
      const testUrl = 'https://metaphase.tech';
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      const formattedUrl = formatUrl(testUrl);
      expect(formattedUrl).toBe('https://metaphase.tech');
      expect(formattedUrl).not.toBe('');
    });

    it('should handle invalid URL input', () => {
      const testUrl = '';
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      const formattedUrl = formatUrl(testUrl);
      expect(formattedUrl).toBe('');
    });

    it('should handle URL with whitespace', () => {
      const testUrl = '  https://farmers.gov  ';
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      const formattedUrl = formatUrl(testUrl);
      expect(formattedUrl).toBe('https://farmers.gov');
    });
  });

  describe('Error Handling', () => {
    it('should handle missing URL gracefully', () => {
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      const result = formatUrl('');
      expect(result).toBe('');
    });

    it('should handle malformed URLs', () => {
      const formatUrl = (inputUrl: string): string => {
        const trimmedUrl = inputUrl.trim();
        if (!trimmedUrl) return '';
        if (trimmedUrl.startsWith('http://') || trimmedUrl.startsWith('https://')) {
          return trimmedUrl;
        }
        return `https://${trimmedUrl}`;
      };

      const result = formatUrl('not-a-url');
      expect(result).toBe('https://not-a-url');
    });
  });

  describe('Compression Options', () => {
    it('should accept valid compression levels', () => {
      const validCompressionLevels = ['none', 'standard', 'maximum'];
      
      validCompressionLevels.forEach(level => {
        expect(validCompressionLevels).toContain(level);
      });
    });

    it('should default to standard compression', () => {
      const defaultCompression = 'standard';
      expect(defaultCompression).toBe('standard');
    });
  });
}); 